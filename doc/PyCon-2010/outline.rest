A New Look at Programming Language and Compiler Technologies
============================================================

============
Introduction
============

- Modernize traditional compiler technologies (found in the "Dragon Book")

- Modernize programming language technologies by using these new compiler
  technologies

- Initially target the Arduino microcontroller (AVR instruction set)

  - 8 bit processor
  - 16MHz clock
  - 32K bytes of flash memory (program storage)
  - 2K bytes of RAM (data storage)
  - 32 (8-bit) registers
  - lots of hardware goodies!

    - that this talk doesn't get into...

  - later maybe ARM for the Lego Mindstorms NXT robots

- Write the compiler in Python as a hands-on programming exercise by the
  Tampa Bay Python meetup group

  - Writing the compiler in Python allows a very small group to tackle a large
    significant problem

    - now anybody can bring their "Evil Plan to Rule the World" to fruition!

      - and present at a national conference ;-)

- How might these ideas apply to other projects like, say, a Python compiler?

=================================
Modernizing Compiler Technologies
=================================

- We're starting with the "Dragon Book"

  - *Principles of Compiler Design*, by Alfred V. Aho and Jeffrey D. Ullman

    - I have the first edition, copyrighted 1977

- Add these new technologies (that appeared after the book was written):

  - A GUI forms-based question and answer mechanism
  
    - as an alternative to formal syntax for declarations within the language

  - Extensible, object-oriented interfaces
  
    - to make the internal workings of the compiler available and extensible
      as an additional resource for library developers

  - A relational database
  
    - to make the results of compiler optimization analysis available to the
      programmer

- And for good measure:

  - Stackless functions

  - Include the Dragon Book's global optimization algorithms

    - that are typically not used in modern C compilers

    - this means jettisoning the ideas of separate compilation and the link
      editor (or unix "loader")

===========================================
Modernize Programming Language Technologies
===========================================

(this might be a demo)

- let GUI do graphically what modules & packages do grammatically

  - so a "compilation unit" becomes a single declaration

- add Q&A to declarations

  - so a declaration has both Q&A and an optional text file
  - many declarations only need Q&A (variables, constants, types, imports)

- extensible control statements

  - with extensible syntax
  - programmer access to compiler

- extensible declarations

  - Q&A means not having to add new syntax, which reduces the "surface area"
    of the language
  - can use different grammars in the text files

    - Python for compile-time code
    - Our own language for high-level functions
    - assembler functions

- adaptable libraries

  - Q&A on "import"
   
    - done once, but can be at any level within nested packages
    - can influence how declarations and the library are compiled

- add installation level Q&A to customize programs to specific chips, pinouts
  and clock speeds

===============================
Object-oriented Compiler Design
===============================

- a program is a set of declarations which we call *words*

  - some words declare new kinds of declarations

    - these can be used to define other words

      - so we call these *defining* words
      - the word **function** is a defining word

  - other declarations are *normal* words

    - the word **foo** (a function) is a normal word

- The design revolves around one base class: **declaration**

  - different subclass for each defining word (**function**)
  - different instance for each normal word (**foo** function)
  - references (calls) to foo are just rows in the database

- The steps to compiling a program

  #. create the internal objects for each word (declaration)

     - defining words are subclasses

       - the text part of these words is the Python code defining a subclass of
         **declaration**
       - these are imported and then initialized with an *init_class*
         classmethod

     - normal words are instances of defining words

       - these are created with a *create_instance* classmethod

     - this process also identifies all of the new syntax being added to the
       language

  #. add the new syntax (if any) to the built in syntax to create a custom
     parser

  #. parse the text file for each normal declaration

     - call *parse_file* on the declaration instance created in step 1

       - updates the Symbol Table in the database
       - generates an Abstract Syntax Tree (AST) in the database

  #. macro-expand AST and set "expects" information

     - call *expand* on the declaration instance for each call to it
     - "expects" is a tag on arguments to specify how they need to be compiled:

       - rvalue
       - lvalue
       - condition
       - iterator

  #. calculate CHANGE and USES info for each function

     - algorithms taken from the Dragon Book
     - not extensible
     - stores results in the database

  #. generate intermediate code

     - call *compile_<expects>* on the declaration instance for each call to it
     - stores basic blocks and DAGs in the database

  #. optimize intermediate code

     - algorithms taken from the Dragon Book
     - not extensible

  #. code generation

     - convert intermediate code to AVR assembler
     - not extensible

  #. assemble

     - generates .hex file

       - this is loaded into the microcontroller with a standard program

     - not extensible

- Steps 1 through 6 make up the front-end of the compiler.

  - the size of the compilation unit is the individual declaration
  - these are user extensible

- Steps 7 through 9 make up the back-end of the compiler.

  - the size of the compilation unit is the entire program
  - algorithms taken from the Dragon Book
  - these are not user extensible


==========
Conclusion
==========

-----
Goals
-----

- Develop a new microcontroller language

- Allow the developers of large libraries to empower their users by writing
  the libraries more as language extensions

  - Boils down to allowing the library writer to write code that integrates
    with the compiler and runs at compile-time.

- Explore coroutine and green threading capabilities using "stackless"
  functions

  - for easier interrupt processing
  - static function activation records, rather than allocated in heap

- Make the compiler internals accessible to the programmer as an additional
  resource (like using a library)

- Explore the global flow analysis routines in the "Dragon Book" that typical
  C compilers don't use

- Explore tackling a very challenging project as a hands-on development
  exercise

----------
The Future
----------

- We are exploring technical ideas on several levels that you might be
  interested in

- Examples of how these might be applied to a Python compiler:

  - extensible declarations using Q&A and allowing different syntaxes

    - PLY (Python Lex Yacc)
    - SQLAlchemy
    - HTML templates
    - The image of a variety of text syntaxes reminds me of Zope

      - A fully compiled alternative to Zope??

  - stackless

    - coroutines/generators

      - suspendable consumers as well as producers
      - objects representing the consumer that can be passed around (like
        iterators objects represent the producer)
      - make more explicit the difference between generating values to a
        consumer vs finally returning from the generator when there are no
        more values

    - Twisted built in

      - get the benefits for free

  - use of relational database for a better IDE

  - global flow analysis to improve Python performance by an order of
    magnitude or more (10x-50x)

    - by recognizing special cases that dominate our use of language

      - variables never deleted can be assigned to fixed offsets
      - instance variables assigned to fixed offsets when no multiple
        inheritance is used in derived classes
      - direct calls to built in functions when their names are never
        defined in the module
      - direct calls to functions that are never redefined
      - placing function activation records on a stack when the function
        doesn't need stackless capability
      - figuring out actual to formal parameter mappings at compile time
        when the function is never redefined
      - multiple entry points for different numbers of parameters, or
        saving different sets of registers
      - allocate objects in the longest living function activation record
        that will use them

        - to reduce how often the garbage collector has to run

    - provide a benchmark for comparison to newer JIT technologies being
      developed by the PyPy project


===================
Notes for Reviewers
===================

I expect that most of the audience will not be interested, or knowledgeable,
in microcontrollers.  I only plan to give a very brief overview of the
microcontroller's capabilities, from a programming perspective (ignoring
the hardware goodies).  And I am not planning on presenting the syntax for
this language, as I don't see it as scalable to larger programming arenas.

Rather, I'm focusing on broader concepts that may be useful in other domains.
As 30 minutes does not allow enough time to go into detail, this talk will
assume some knowledge of compiler technology by the audience.  Thus, I have
labeled this as an advanced talk.

The project development is about half-way through, so we haven't quite gotten
to the point of seeing how well these ideas work in practice.

I expect to have a running prototype by the conference date, and that we will
be just starting to get a feel for how well these ideas work by then.  This
will affect the presentation somewhat (especially the Conclusion section).

Finally, I will be paying my own way to the conference and asking for
financial aid.  At this time, I don't know if any other members of the Tampa
Bay Python meetup group will be attending the conference.  Alas, their paying
jobs are not using Python...
