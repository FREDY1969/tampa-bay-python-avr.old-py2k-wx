Taking a New Look at Language and Compiler Technologies via the Arduino
=======================================================================

========
Overview
========

------------
Introduction
------------

- Modernize tradional compiler technologies

  - found in the "Dragon Book"

- Modernize programming language technologies

  - using these new compiler technologies

- Initially target the Arduino microcontroller (AVR instruction set)

  - 8 bit processor
  - 32K bytes of flash memory (program storage)
  - 2K bytes of RAM (data storage)
  - 16MHz clock
  - 32 (8-bit) registers
  - lots of hardware goodies!

    - that this talk doesn't get into...

  - later maybe ARM for the Lego Mindstorms NXT robots

- Write the compiler in Python as a "hands-on" programming exercise by the
  Tampa Bay Python meetup group

- What do you get?

- How might this apply to other projects like, say, a Python compiler?

---------------------------------
Modernizing Compiler Technologies
---------------------------------

- We're starting with: the "Dragon Book"

  - Principles of Compiler Design, by Alfred V. Aho and Jeffrey D. Ullman

    - I have the first edition, copyrighted 1977

- Add these new technologies (that appeared after the book was written):

  - A GUI forms-based question and answer mechanism
  
    - as an alternative to formal syntax for declarations within the language

  - Extensible, object-oriented interfaces
  
    - to open up the internal workings of the compiler to library developers

  - A relational database
  
    - to make the results of compiler optimization analysis available to the
      programmer

- "Stackless" functions

- Include the Dragon Book's global optimization algorithms

  - that are typically not used in modern C compilers

  - split the concept of a "compilation unit"

    - smaller units for the front-end

      - individual declarations

    - the whole program for the back-end

    - this means jettisoning separate compilation and the link editor
      (or unix "loader")

-------------------------------------------
Modernize Programming Language Technologies
-------------------------------------------

- Develop a new microcontroller language

- Allow the developers of large libraries to empower their users by writing
  the libraries more as language extensions

  - Boils down to allowing the library writer to write code that runs at
    compile-time.

    - for a microcontroller, the distinction between compile-time and run-time
      is very clear!

      - compile-time happens on the PC
      - run-time happens on the microcontroller

- Explore coroutine and green threading capabilities using "stackless"
  functions

  - for easier interrupt processing
  - static function activation records, rather than allocated in heap

- Repackage traditional compiler technologies to open them up to the
  programmer

  - as well as take advantage of the global flow analysis routines in the
    "Dragon Book" that typical C compilers don't do

- Writing the compiler in Python allows a very small group to tackle a large
  significant problem

  - now anybody can bring their "Evil Plan to Rule the World" to fruition!

    - and present at national conferences ;-)


===============================================
Exploring New Extenisible Language Capabilities
===============================================

(knowing that all previous attempts at extenisible languages were failures)!

- large libraries could benefit by the inclusion of compiler-like capabilities

  - many decisions made at run-time in large libraries are based on factors
    that don't change very often

    - SQLAlchemy

      - what data operations does the program need
      - what's your schema look like

    - HTML templating

  - what this ends up being is user code that runs at compile-time (rather
    than run-time)

---------------------------------------------
Meta-programming ("programming in the large")
---------------------------------------------

- user code that runs at compile-time (rather than run-time)
- better run-time performance
- new kinds of extensibility and abstraction

  - programming languages are made up of

    - lexical rules

      - only reserved words are extensible

    - expression syntax

      - not extensible

    - statement syntax

      - extensible through new syntax

        - thus, the parser is created on the fly (using PLY)

      - done primary for extensible control statements

    - declaration syntax

      - this is where the focus is
      - "folder == module", rather than "file == module".
      - declarations have Q&A plus (optional) text file

        - most declarations can be handled entirely with Q&A

          - so adding new types of declarations doesn't add
            syntactic clutter which reduces the "surface area"
            of the language

          - declarations of how hardware will be used

            - which generates the hardware configuration

          - declarations of how libraries will be used

        - the text file for each declaration is parsed separately

          - lets different functions/declarations use different
            parsers with different syntax

            - high-level functions
            - assembler functions

======================
Re-Skinning the Dragon
======================

-------------------------------------------------------------------------------
Compiler uses extensible object-oriented interfaces internally in the front-end
-------------------------------------------------------------------------------

- for meta-programming hooks

----------------------------
IDE integrated with compiler
----------------------------

- handles the Q&A capability
- makes internal compiler information available to the programmer

  - cross reference information
  - program size and worst case execution times

- built on wxpython

----------------------------------------------------
Stores internal compiler data in relational database
----------------------------------------------------

- symbol table
- abstract syntax tree
- use/definition analysis
- makes this information available to the IDE
- nice for debugging the compiler


--------------------------------------------------------------------------------
Optimizes the whole program (including called library routines) as a single unit
--------------------------------------------------------------------------------

- this means no separate link edit (loader) phase

  - also libraries are no longer compiled once, for all to use

- so different "compilation unit" sizes for front-end and back-end

  - smaller for the front-end (individual declaration rather than module)
  - and larger for the back-end (the whole program rather than module)

- lets the optimizer see the big picture
- better register allocation across function calls
- better mapping of functions to addresses to support the shorter Relative
  Call instruction (1 word, 3 cycles vs 2 words, 4 cycles)
- possible use for later Python compiler looking for order of magnitude
  performance boost for Python

  - can place module/class/instance variables at fixed offsets if they
    are initialized at the creation of the containing object and are
    never deleted.

    - class/instance variables if no subclasses use multiple inheritance

  - can optimize lookups to built in functions if their names are never
    defined at the containing module level
  - can optimize function calls (parameter passing) to functions that
    are never changed
  - can allocate function activation records on the stack for functions
    that don't need coroutines or deferred execution
  - allocate objects in the longest living function activation record
    that will use them

    - to reduce how often the garbage collector has to run

  - provide a benchmark for comparison to newer JIT technologies being
    developed in the PyPy project

==========
The Future
==========

- We are exploring technical ideas on several levels that might be useful to
  others

  - new programming language ideas

    - extensible declarations using Q&A rather than syntax

      - in the Python world, I'm thinking of large libraries like SQLAlchemy or
        Django.

        - Doing Zope right??

    - extensible control statements

      - don't really know whether or how this would fit in with Python

  - new compiler ideas

    - stackless

      - coroutines/generators

        - suspendable consumers as well as producers
        - objects representing the consumer that can be passed around (like
          iterators objects represent the producer)
        - make more explicit the difference between generating values to a
          consumer vs finally returning from the generator when there are no
          more values

      - green threads

        - to avoid "event programming" in traditional GUI applications
        - to multi-thread server applications

          - in the Python world, this would be "Twisted for free"

    - use of relational database

      - IDE: letting the programmer know what the compiler knows

    - global flow analysis

      - improve Python performance by an order of magnitude or more (10x-50x)

        - by recognizing special cases that dominate our use of language

          - variables never deleted can be assigned to fixed offsets
          - instance variables assigned to fixed offsets when no multiple
            inheritance is used in derived classes
          - direct calls to builtin functions when their names are never
            defined in the module
          - direct calls to functions that are never redefined
          - placing function activation records on a stack when the function
            doesn't need stackless capability
          - figuring out actual to formal parameter mappings at compile time
            when the function is never redefined
          - multiple entry points for different numbers of parameters, or
            different saving different sets of registers

- We are also exploring using a complicated hands-on project for a local Python
  group that can really show the benefits of developing in Python.

- What we've learned so far.

  - to be determined...


===================
Notes for Reviewers
===================

I expect that most of the audience will not be interested, or knowledgeable,
in microcontrollers.  I only plan to give a very brief overview of the
microcontroller's capabilities, from a programming perspective (ignoring
the hardware goodies).  And I am not planning on presenting the syntax for
this language, as I don't see it as scalable to larger programming arenas.

Rather, I'm focusing on broader concepts that may be useful in other domains.
As 30 minutes does not allow enough time to go into detail, this talk will
assume some knowledge of compiler technology by the audience.  Thus, I have
labeled this as an advanced talk.

The project development is about half-way through, so we haven't quite gotten
to the point of seeing how well these ideas work in practice.

I expect to have a running prototype by the conference date, and that we will
be just starting to get a feel for how well these ideas work by then.  This
will affect this presentation somewhat (especially the Conclusion section).

Finally, I will be paying my own way to the conference and asking for
financial aid.  At this time, I don't know if any other members of the Tampa
Bay Python meetup group will be attending the conference.  Alas, their paying
jobs are not using Python...
