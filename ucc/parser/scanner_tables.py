# scanner_tables.py. This file automatically created by PLY (version 3.2). Don't edit!
_tabversion   = '3.2'
_lextokens    = {'ARG_RIGHT_WORD': 1, 'LP_TOK': 1, 'DEINDENT_TOK': 1, 'INDENT_TOK': 1, 'NEGATE': 1, 'RATIO': 1, 'START_SERIES_TOK': 1, 'BIT_XOR': 1, 'LE': 1, 'NE': 1, 'APPROX_NUMBER': 1, 'ARG_LEFT_WORD': 1, 'BIT_NOT': 1, 'INTEGER': 1, 'NEWLINE_TOK': 1, 'STRING': 1, 'BIT_AND': 1, 'GE': 1, 'EQ': 1, 'AND': 1, 'CHAR': 1, 'NAME': 1, 'BIT_OR': 1, 'LB_TOK': 1, 'NOT': 1, 'OR': 1}
_lexreflags   = 0
_lexliterals  = '()[]:'
_lexstateinfo = {'colonindent': 'exclusive', 'INITIAL': 'inclusive', 'indent': 'exclusive', 'string': 'exclusive'}
_lexstatere   = {'colonindent': [('(?P<t_colonindent_blank_line>\\n (?: \\ * (?: \\# [^\\t\\r\\n]* )? (?:\\r)? \\n )+)|(?P<t_colonindent_INDENT_TOK>\\n\\ *)', [None, ('t_colonindent_blank_line', 'blank_line'), ('t_colonindent_INDENT_TOK', 'INDENT_TOK')])], 'INITIAL': [('(?P<t_START_SERIES_TOK>:                               # :\n        (?:\\ \\ *(?:\\#[^\\t\\r\\n]*)?)?     # optional spaces, optional comment\n        (?:\\r)?\\n                       # newline\n    )|(?P<t_NEWLINE_TOK>(?:\\r)?\\n)|(?P<t_CHAR>\'[^\\\\\\t\\r\\n]\')|(?P<t_escaped_char_tok>\'\\\\[^xX\\t\\r\\n]\')|(?P<t_hex_char_tok>\'\\\\[xX][0-9a-fA-F]{2}\')|(?P<t_start_string>")|(?P<t_LP_TOK>(?<![^[( ])     # preceded by [, (, or space, or at start of line\n        \\(\n    )|(?P<t_LB_TOK>(?<![^[( ])     # preceded by [, (, or space, or at start of line\n        \\[\n    )|(?P<t_RATIO>[0-9]+/[0-9]+   # ratio\n        (?=[]) \\r\\n])   # followed by ], ), space or newline\n    )|(?P<t_ratio_2>[0-9]+\n        \\.[0-9]+        # decimal point\n        /[0-9]+         # denominator\n        (?=[]) \\r\\n])   # followed by ], ), space or newline\n    )|(?P<t_ratio_3>[0-9]+\n        \\.[0-9]+        # decimal point\n        /               # implied denominator\n        (?=[]) \\r\\n])   # followed by ], ), space or newline\n    )|(?P<t_ratio_4>\\.[0-9]+        # decimal point\n        /               # implied denominator\n        (?=[]) \\r\\n])   # followed by ], ), space or newline\n    )|(?P<t_hex_RATIO>0[xX][0-9a-fA-F]+/[0-9a-fA-F]+ # ratio\n        (?=[]) \\r\\n])                  # followed by ], ), space or newline\n    )|(?P<t_hex_ratio_2>0[xX][0-9a-fA-F]+\n        \\.[0-9a-fA-F]+        # decimal point\n        /[0-9a-fA-F]+         # denominator\n        (?=[]) \\r\\n])         # followed by ], ), space or newline\n    )|(?P<t_hex_ratio_3>0[xX][0-9a-fA-F]+\n        \\.[0-9a-fA-F]+        # decimal point\n        /                     # implied denominator\n        (?=[]) \\r\\n])         # followed by ], ), space or newline\n    )|(?P<t_hex_ratio_4>0[xX]\n        \\.[0-9a-fA-F]+        # decimal point\n        /                     # implied denominator\n        (?=[]) \\r\\n])         # followed by ], ), space or newline\n    )|(?P<t_APPROX_NUMBER>(?: [0-9]+ \\.[0-9]* | \\.[0-9]+ )\n        (?: ~[0-9] )?\n        (?: [eE] [+-]?[0-9]+ )?\n        (?=[]) \\r\\n])    # followed by ], ), space or newline\n    )|(?P<t_approx_2>[0-9]+ (?: (?: ~[0-9] )? [eE] [+-]?[0-9]+ | ~[0-9] )\n        (?=[]) \\r\\n])    # followed by ], ), space or newline\n    )|(?P<t_hex_APPROX_NUMBER>0[xX] (?: [0-9a-fA-F]+ \\.[0-9a-fA-F]* | \\.[0-9a-fA-F]+ )\n              (?: ~[0-9a-fA-F] )?\n              (?: [xX] [+-]?[0-9]+ )?\n        (?=[]) \\r\\n])    # followed by ], ), space or newline\n    )|(?P<t_hex_approx_2>0[xX] [0-9a-fA-F]+\n        (?: (?: ~[0-9a-fA-F] )? [xX] [+-]?[0-9]+\n          | ~[0-9a-fA-F] )\n        (?=[]) \\r\\n])    # followed by ], ), space or newline\n    )|(?P<t_INTEGER>[0-9]+\n        (?=[]) \\r\\n])   # followed by ], ), space or newline\n    )|(?P<t_hex_INTEGER>0[xX][0-9]+\n        (?=[]) \\r\\n])   # followed by ], ), space or newline\n    )|(?P<t_NAME_n>[^[( \\r\\n"\'#-]     # first character\n        [^[( \\r\\n]*        # middle characters\n        [^])[( \\r\\n:]      # last character\n    )|(?P<t_NAME>[^])[( \\r\\n:"\'#-]\n        (?=[][() \\r\\n])    # followed by [, ], (, ), space or newline\n    )|(?P<t_NEGATE>-\n        (?=[^]) \\r\\n])  # followed by name, number, string, -, ( or [\n    )|(?P<t_minus>-\n        (?=[]) \\r\\n])   # followed by space, newline, ] or )\n    )|(?P<t_ignore_comment>\\#[^\\t\\r\\n]*)', [None, ('t_START_SERIES_TOK', 'START_SERIES_TOK'), ('t_NEWLINE_TOK', 'NEWLINE_TOK'), ('t_CHAR', 'CHAR'), ('t_escaped_char_tok', 'escaped_char_tok'), ('t_hex_char_tok', 'hex_char_tok'), ('t_start_string', 'start_string'), ('t_LP_TOK', 'LP_TOK'), ('t_LB_TOK', 'LB_TOK'), ('t_RATIO', 'RATIO'), ('t_ratio_2', 'ratio_2'), ('t_ratio_3', 'ratio_3'), ('t_ratio_4', 'ratio_4'), ('t_hex_RATIO', 'hex_RATIO'), ('t_hex_ratio_2', 'hex_ratio_2'), ('t_hex_ratio_3', 'hex_ratio_3'), ('t_hex_ratio_4', 'hex_ratio_4'), ('t_APPROX_NUMBER', 'APPROX_NUMBER'), ('t_approx_2', 'approx_2'), ('t_hex_APPROX_NUMBER', 'hex_APPROX_NUMBER'), ('t_hex_approx_2', 'hex_approx_2'), ('t_INTEGER', 'INTEGER'), ('t_hex_INTEGER', 'hex_INTEGER'), ('t_NAME_n', 'NAME_n'), ('t_NAME', 'NAME'), ('t_NEGATE', 'NEGATE'), ('t_minus', 'minus'), (None, None)])], 'indent': [('(?P<t_indent_blank_line>\\n(?: \\ * (?: \\# [^\\t\\r\\n]* )? (?:\\r)? \\n )+)|(?P<t_indent_sp>\\n\\ *)', [None, ('t_indent_blank_line', 'blank_line'), ('t_indent_sp', 'sp')])], 'string': [('(?P<t_string_char>[^\\\\"\\t\\r\\n])|(?P<t_string_escaped_char>\\\\[^xX\\t\\r\\n])|(?P<t_string_hex_char>\\\\[xX][0-9a-fA-F]{2})|(?P<t_string_STRING>")', [None, ('t_string_char', 'char'), ('t_string_escaped_char', 'escaped_char'), ('t_string_hex_char', 'hex_char'), ('t_string_STRING', 'STRING')])]}
_lexstateignore = {'colonindent': '', 'INITIAL': ' ', 'indent': '', 'string': ''}
_lexstateerrorf = {'colonindent': 't_ANY_error', 'INITIAL': 't_ANY_error', 'indent': 't_ANY_error', 'string': 't_ANY_error'}
