-- schema.ddl

create table ast (
    -- The Abstract Syntax Tree (AST).  See AbstractSyntaxTree page in google
    -- code project wiki.

    id integer not null primary key,
    word_body_id int,                          -- NULL for the word_body itself

    -- For macro expansions:
    id_replaced int unique references ast(id),
    root_id_replaced int references ast(id),
    replacement_depth int,

    kind varchar(255),                         -- type of ast
    expect varchar(255),                       -- what's expected by the parent
    type_id int references type(id),

    word varchar(255) collate nocase,
    int1 int,
    int2 int,
    str varchar(2000),

    -- ast argument nodes are linked to their parent nodes:
    parent_node int references ast(id),
    parent_arg_num int,
    arg_order int,                             -- for list arguments, else 0

    -- for nodes generated by the parser:
    line_start int,
    column_start int,
    line_end int,
    column_end int,

    unique (root_id_replaced, replacement_depth),
    unique (parent_node, parent_arg_num, arg_order)
);

create index word_index on ast (word, kind, expect);

create index word_body_index on ast (word_body_id,
                                     parent_node, parent_arg_num, arg_order);

create table gensym_indexes (
    prefix varchar(255) not null,
    last_used_index int not null
);

create table type (
    -- Describes what is known about a value at compile time.

    id integer not null primary key,
    kind varchar(255) not null,
    min_value int,
    max_value int,
    binary_pt int,
    precision int,
    element_type int references type(id)
);
